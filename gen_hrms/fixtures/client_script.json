[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Intern Offer",
  "enabled": 1,
  "modified": "2025-09-12 12:43:04.597837",
  "module": "Gen Hrms",
  "name": "Intern Offer Functionality",
  "script": "// Client Script for Offer Letter DocType\n// Add this in: Setup > Client Script\n\nfrappe.ui.form.on('Offer Letter', {\n    refresh: function(frm) {\n        // Add custom buttons in the toolbar\n        if (!frm.doc.__islocal && frm.doc.offer_status !== 'Draft') {\n            frm.add_custom_button(__('Generate PDF'), function() {\n                generate_pdf(frm);\n            }, __('Actions'));\n            \n            frm.add_custom_button(__('Send Email'), function() {\n                send_offer_email(frm);\n            }, __('Actions'));\n        }\n        \n        // Add button to fetch intern details\n        if (frm.doc.intern_application && !frm.doc.intern_name) {\n            frm.add_custom_button(__('Fetch Intern Details'), function() {\n                fetch_intern_details(frm);\n            });\n        }\n    },\n    \n    // Handle the \"Get Intern Details\" button click\n    get_intern_details: function(frm) {\n        fetch_intern_details(frm);\n    },\n    \n    // Handle the \"Generate PDF\" button click  \n    generate_pdf: function(frm) {\n        generate_pdf(frm);\n    },\n    \n    // Handle the \"Send Email\" button click\n    send_email: function(frm) {\n        send_offer_email(frm);\n    },\n    \n    // Auto-fetch details when intern application is selected\n    intern_application: function(frm) {\n        if (frm.doc.intern_application && !frm.doc.intern_name) {\n            frappe.confirm(\n                __('Do you want to fetch intern details from the selected application?'),\n                function() {\n                    fetch_intern_details(frm);\n                }\n            );\n        }\n    },\n    \n    // Calculate duration when dates change\n    start_date: function(frm) {\n        calculate_duration(frm);\n    },\n    \n    end_date: function(frm) {\n        calculate_duration(frm);\n    },\n    \n    // Show/hide stipend field based on paid internship checkbox\n    is_paid_internship: function(frm) {\n        frm.toggle_display('stipend_amount', frm.doc.is_paid_internship);\n        frm.toggle_reqd('stipend_amount', frm.doc.is_paid_internship);\n    }\n});\n\n// Function to generate PDF\nfunction generate_pdf(frm) {\n    if (frm.doc.__islocal) {\n        frappe.msgprint(__('Please save the document first'));\n        return;\n    }\n    \n    frappe.show_alert({\n        message: __('Generating PDF...'),\n        indicator: 'blue'\n    });\n    \n    frappe.call({\n        method: 'generate_offer_pdf',\n        args: {\n            offer_letter_name: frm.doc.name\n        },\n        callback: function(r) {\n            if (r.message) {\n                frm.reload_doc();\n                if (r.message.file_url) {\n                    window.open(r.message.file_url, '_blank');\n                }\n            }\n        },\n        error: function(r) {\n            frappe.show_alert({\n                message: __('Error generating PDF'),\n                indicator: 'red'\n            });\n        }\n    });\n}\n\n// Function to send offer email\nfunction send_offer_email(frm) {\n    if (frm.doc.__islocal) {\n        frappe.msgprint(__('Please save the document first'));\n        return;\n    }\n    \n    if (!frm.doc.intern_email) {\n        frappe.msgprint(__('Intern email is required'));\n        return;\n    }\n    \n    frappe.confirm(\n        __('Are you sure you want to send the offer letter to {0}?', [frm.doc.intern_email]),\n        function() {\n            frappe.show_alert({\n                message: __('Sending email...'),\n                indicator: 'blue'\n            });\n            \n            frappe.call({\n                method: 'send_offer_letter_email',\n                args: {\n                    offer_letter_name: frm.doc.name\n                },\n                callback: function(r) {\n                    if (r.message) {\n                        frm.reload_doc();\n                    }\n                },\n                error: function(r) {\n                    frappe.show_alert({\n                        message: __('Error sending email'),\n                        indicator: 'red'\n                    });\n                }\n            });\n        }\n    );\n}\n\n// Function to fetch intern details\nfunction fetch_intern_details(frm) {\n    if (!frm.doc.intern_application) {\n        frappe.msgprint(__('Please select an Intern Application first'));\n        return;\n    }\n    \n    frappe.show_alert({\n        message: __('Fetching intern details...'),\n        indicator: 'blue'\n    });\n    \n    frappe.call({\n        method: 'fetch_intern_details',\n        args: {\n            offer_letter_name: frm.doc.name\n        },\n        callback: function(r) {\n            if (r.message) {\n                frm.reload_doc();\n            }\n        },\n        error: function(r) {\n            frappe.show_alert({\n                message: __('Error fetching details'),\n                indicator: 'red'\n            });\n        }\n    });\n}\n\n// Function to calculate duration between dates\nfunction calculate_duration(frm) {\n    if (frm.doc.start_date && frm.doc.end_date) {\n        let start = frappe.datetime.str_to_obj(frm.doc.start_date);\n        let end = frappe.datetime.str_to_obj(frm.doc.end_date);\n        \n        if (end > start) {\n            let months = frappe.datetime.get_diff(end, start) / 30;\n            frm.set_value('duration_months', Math.round(months));\n        }\n    }\n}\n\n// Auto-set position title based on department\nfrappe.ui.form.on('Offer Letter', {\n    department: function(frm) {\n        if (frm.doc.department && !frm.doc.position_title) {\n            let title_map = {\n                'Software Development': 'Software Development Intern',\n                'Web Development': 'Web Development Intern', \n                'Mobile App Development': 'Mobile App Development Intern',\n                'Data Science': 'Data Science Intern',\n                'UI/UX Design': 'UI/UX Design Intern',\n                'Digital Marketing': 'Digital Marketing Intern',\n                'Human Resources': 'HR Intern',\n                'Finance': 'Finance Intern',\n                'Operations': 'Operations Intern'\n            };\n            \n            frm.set_value('position_title', title_map[frm.doc.department] || 'Intern');\n        }\n    }\n});",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Offer",
  "enabled": 0,
  "modified": "2025-09-16 11:22:39.987613",
  "module": "Gen Hrms",
  "name": "Data to Job Offer Terms Table",
  "script": "// Client script for Job Offer Doctype\n// This script auto-populates the Offer Terms based on custom field values\n\nfrappe.ui.form.on('Job Offer', {\n    refresh: function(frm) {\n        console.log('Job Offer form refreshed');\n        // Set up field change events for all relevant custom fields\n        \n\n            setup_field_events(frm);\n        \n        // Also update terms when form refreshes\n                setTimeout(() => update_offer_terms(frm), 1000);\n\n    \n    },\n    \n    after_load: function(frm) {\n        console.log('Job Offer form loaded');\n        // Update terms when form loads with existing data\n        setTimeout(() => update_offer_terms(frm), 1000);\n    },\n    \n    // Handle template selection\n    job_offer_term_template: function(frm) {\n        console.log('Job Offer Term Template selected:', frm.doc.job_offer_term_template);\n        // Update terms after a delay to allow template to load\n        setTimeout(() => update_offer_terms(frm), 1500);\n    },\n    \n    // Handle date changes to calculate period\n    custom_start_date: function(frm) {\n        calculate_period(frm);\n        update_offer_terms(frm);\n    },\n    \n    custom_end_date: function(frm) {\n        calculate_period(frm);\n        update_offer_terms(frm);\n    },\n    \n    // Handle stipend amount change specifically - CORRECTED FIELD NAME\n    custom_salary__stipend: function(frm) {\n        console.log('Stipend amount changed:', frm.doc.custom_salary__stipend);\n        update_offer_terms(frm);\n    },\n    \n    // Add this to handle when the child table is populated\n    offer_terms_add: function(frm) {\n        console.log('Row added to offer_terms');\n        update_offer_terms(frm);\n    }\n});\n\nfunction setup_field_events(frm) {\n    console.log('Setting up field events');\n    \n    // List of custom fields to monitor for changes - CORRECTED FIELD NAME\n    const custom_fields = [\n        'custom_department',\n        'custom_start_date',\n        'custom_period',\n        'custom_work_location',\n        'custom_salary__stipend', // Corrected: double underscore\n        'custom_supervisor',\n        'custom_end_date',\n        'custom_work_schedule',\n        'designation',\n        'company'\n    ];\n    \n    console.log('Monitoring these fields:', custom_fields);\n    \n    // Attach event listeners to each field\n    custom_fields.forEach(field => {\n        if (frm.fields_dict[field] && frm.fields_dict[field].df) {\n            console.log('Adding event listener for field:', field);\n            frappe.ui.form.on('Job Offer', field, function(frm) {\n                console.log('Field changed:', field, 'Value:', frm.doc[field]);\n                update_offer_terms(frm);\n            });\n        } else {\n            console.log('Field not found:', field);\n        }\n    });\n}\n\nfunction calculate_period(frm) {\n    if (frm.doc.custom_start_date && frm.doc.custom_end_date) {\n        try {\n            const startDate = new Date(frm.doc.custom_start_date);\n            const endDate = new Date(frm.doc.custom_end_date);\n            \n            // Calculate total difference in days (inclusive)\n            const totalDays = Math.floor((endDate - startDate) / (24 * 60 * 60 * 1000)) + 1;\n            \n            // Calculate months accurately\n            let monthsDiff = 0;\n            let tempDate = new Date(startDate);\n            \n            // Add months until we exceed the end date\n            while (tempDate < endDate) {\n                tempDate.setMonth(tempDate.getMonth() + 1);\n                if (tempDate <= endDate) {\n                    monthsDiff++;\n                }\n            }\n            \n            // Calculate remaining days after full months\n            const lastFullMonth = new Date(startDate);\n            lastFullMonth.setMonth(lastFullMonth.getMonth() + monthsDiff);\n            const remainingDays = Math.floor((endDate - lastFullMonth) / (24 * 60 * 60 * 1000));\n            \n            // Calculate weeks\n            const weeksDiff = Math.floor(totalDays / 7);\n            const remainingDaysFromWeeks = totalDays % 7;\n            \n            let periodText = '';\n            \n            if (monthsDiff >= 1) {\n                periodText = `${monthsDiff} month${monthsDiff !== 1 ? 's' : ''}`;\n                if (remainingDays > 0) {\n                    periodText += ` ${remainingDays} day${remainingDays !== 1 ? 's' : ''}`;\n                }\n            } else if (weeksDiff >= 1) {\n                periodText = `${weeksDiff} week${weeksDiff !== 1 ? 's' : ''}`;\n                if (remainingDaysFromWeeks > 0) {\n                    periodText += ` ${remainingDaysFromWeeks} day${remainingDaysFromWeeks !== 1 ? 's' : ''}`;\n                }\n            } else {\n                periodText = `${totalDays} day${totalDays !== 1 ? 's' : ''}`;\n            }\n            \n            // Update the period field\n            frm.set_value('custom_period', periodText.trim());\n            console.log('Period calculated:', periodText.trim());\n            \n        } catch (error) {\n            console.error('Error calculating period:', error);\n        }\n    }\n}\n\nfunction update_offer_terms(frm) {\n    console.log('Updating offer terms');\n    \n    // Only update if a template is selected\n    if (!frm.doc.job_offer_term_template) {\n        console.log('No Job Offer Term Template selected, skipping update');\n        return;\n    }\n    \n    // Get values from custom fields - CORRECTED FIELD NAME\n    const department = frm.doc.custom_department || '[Department Name]';\n    const start_date = frm.doc.custom_start_date ? format_date(frm.doc.custom_start_date) : '[Start Date]';\n    const period = frm.doc.custom_period || '[X] months/weeks';\n    const work_location = frm.doc.custom_work_location || '[Office Address/Remote/Hybrid]';\n    const salary_stipend = frm.doc.custom_salary__stipend ? format_currency(frm.doc.custom_salary__stipend) : '[Amount]'; // Corrected\n    const supervisor = frm.doc.custom_supervisor_name || '[Supervisor Name and Designation]';\n    const end_date = frm.doc.custom_end_date ? format_date(frm.doc.custom_end_date) : '[End Date]';\n    const work_schedule = frm.doc.custom_work_schedule || '[Days and Hours]';\n    const designation = frm.doc.designation || '[Internship Position]';\n    const company = frm.doc.company || '[Company Name]';\n    \n    console.log('Field values:', {\n        department, start_date, period, work_location, \n        salary_stipend, supervisor, end_date, work_schedule, \n        designation, company\n    });\n    \n    // Create simple list format without HTML\n    const internship_details = \n        `• Position: ${designation}\\n` +\n        `• Department: ${department}\\n` +\n        `• Supervisor: ${supervisor}\\n` +\n        `• Duration: ${start_date} to ${end_date} (${period})\\n` +\n        `• Work Schedule: ${work_schedule}\\n` +\n        `• Work Location: ${work_location}`;\n    \n    const stipend_benefits = \n        `• Monthly Stipend: ${salary_stipend}`;\n    \n    console.log('Internship details:', internship_details);\n    console.log('Stipend benefits:', stipend_benefits);\n    \n    // Try to update existing rows first\n    const internship_updated = update_child_table_row_by_term(frm, 'Internship Details', internship_details);\n    const stipend_updated = update_child_table_row_by_term(frm, 'Stipend and Benefits', stipend_benefits);\n    \n    // If rows don't exist yet, add them\n    if (!internship_updated) {\n        console.log('Adding Internship Details row');\n        add_child_table_row(frm, 'Internship Details', internship_details);\n    }\n    \n    if (!stipend_updated) {\n        console.log('Adding Stipend and Benefits row');\n        add_child_table_row(frm, 'Stipend and Benefits', stipend_benefits);\n    }\n    \n    // Refresh the form to see changes\n    frm.refresh_field('offer_terms');\n}\n\nfunction update_child_table_row_by_term(frm, offer_term_value, new_value) {\n    console.log('Looking for offer term:', offer_term_value);\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        console.log('Child table found: offer_terms');\n        const grid = child_table.grid;\n        \n        // Find the row with the matching offer_term value\n        let target_row = null;\n        let row_index = -1;\n        \n        grid.data.forEach((row, idx) => {\n            if (row.offer_term === offer_term_value) {\n                target_row = row;\n                row_index = idx;\n                console.log('Found matching row at index:', idx, 'Row:', row);\n            }\n        });\n        \n        if (target_row) {\n            console.log('Updating row with value:', new_value);\n            // Update the value/description field\n            frappe.model.set_value(target_row.doctype, target_row.name, 'value', new_value);\n            console.log('Value updated successfully');\n            \n            // Refresh the grid to see changes\n            grid.refresh();\n            return true;\n        } else {\n            console.log('Row not found with offer_term:', offer_term_value);\n            console.log('Available rows:', grid.data.map(r => r && r.offer_term ? r.offer_term : 'undefined'));\n            return false;\n        }\n    } else {\n        console.log('Child table not found: offer_terms');\n        return false;\n    }\n}\n\nfunction add_child_table_row(frm, offer_term_value, value) {\n    console.log('Adding new row for:', offer_term_value);\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        // Add a new row\n        const new_row = frappe.model.add_child(frm.doc, 'Job Offer Term', 'offer_terms');\n        \n        // Set the values\n        new_row.offer_term = offer_term_value;\n        new_row.value = value;\n        \n        // Refresh the grid\n        child_table.grid.refresh();\n        \n        console.log('Row added successfully');\n        return true;\n    } else {\n        console.log('Child table not found: offer_terms');\n        return false;\n    }\n}\n\nfunction format_date(date_string) {\n    if (!date_string) return '';\n    \n    // Handle Frappe date format (YYYY-MM-DD)\n    const date_parts = date_string.split('-');\n    if (date_parts.length === 3) {\n        const date = new Date(date_parts[0], date_parts[1] - 1, date_parts[2]);\n        return date.toLocaleDateString('en-US', { \n            year: 'numeric', \n            month: 'long', \n            day: 'numeric' \n        });\n    }\n    \n    return date_string;\n}\n\nfunction format_currency(amount) {\n    if (!amount) return '';\n    \n    // Check if amount is already formatted\n    if (typeof amount === 'string' && amount.includes('$')) {\n        return amount;\n    }\n    \n    // Convert to number if it's a string\n    const numericAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    \n    return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'INR',\n        minimumFractionDigits: 2\n    }).format(numericAmount);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Offer",
  "enabled": 0,
  "modified": "2025-09-16 18:23:01.975304",
  "module": "Gen Hrms",
  "name": "Offer Letter Filler for Intern and Full Time",
  "script": "// Client script for Job Offer Doctype\n// This script auto-populates the Offer Terms based on custom field values for Interns only\n\nfrappe.ui.form.on('Job Offer', {\n    refresh: function(frm) {\n        console.log('Job Offer form refreshed');\n        \n        // Check if employment type is Intern\n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Intern employment type detected, setting up field events');\n            setup_field_events(frm);\n            \n            // Also update terms when form refreshes\n            setTimeout(() => update_offer_terms(frm), 1000);\n        } else {\n            console.log('Not an Intern employment type, skipping setup');\n        }\n    },\n    \n    after_load: function(frm) {\n        console.log('Job Offer form loaded');\n        \n        // Update terms when form loads with existing data only for Interns\n        if (frm.doc.custom_employment_type === 'Intern') {\n            setTimeout(() => update_offer_terms(frm), 1000);\n        }\n    },\n    \n    // Handle template selection\n    job_offer_term_template: function(frm) {\n        // Only process for Interns\n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Job Offer Term Template selected:', frm.doc.job_offer_term_template);\n            // Update terms after a delay to allow template to load\n            setTimeout(() => update_offer_terms(frm), 1500);\n        }\n    },\n    \n    // Handle employment type change\n    custom_employment_type: function(frm) {\n        console.log('Employment type changed to:', frm.doc.custom_employment_type);\n        \n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Intern selected, setting up field events');\n            setup_field_events(frm);\n            update_offer_terms(frm);\n        } else {\n            console.log('Not an Intern, removing field events and clearing terms');\n            remove_field_events(frm);\n            clear_internship_terms(frm);\n        }\n    },\n    \n    // Handle date changes to calculate period (only for Interns)\n    custom_start_date: function(frm) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            calculate_period(frm);\n            update_offer_terms(frm);\n        }\n    },\n    \n    custom_end_date: function(frm) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            calculate_period(frm);\n            update_offer_terms(frm);\n        }\n    },\n    \n    // Handle stipend amount change specifically - CORRECTED FIELD NAME (only for Interns)\n    custom_salary__stipend: function(frm) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Stipend amount changed:', frm.doc.custom_salary__stipend);\n            update_offer_terms(frm);\n        }\n    },\n    \n    // Add this to handle when the child table is populated (only for Interns)\n    offer_terms_add: function(frm) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Row added to offer_terms');\n            update_offer_terms(frm);\n        }\n    }\n});\n\n// Store field event handlers for cleanup\nlet field_handlers = {};\n\nfunction setup_field_events(frm) {\n    console.log('Setting up field events for Intern');\n    \n    // List of custom fields to monitor for changes - CORRECTED FIELD NAME\n    const custom_fields = [\n        'custom_department',\n        'custom_start_date',\n        'custom_period',\n        'custom_work_location',\n        'custom_salary__stipend', // Corrected: double underscore\n        'custom_supervisor',\n        'custom_end_date',\n        'custom_work_schedule',\n        'designation',\n        'company'\n    ];\n    \n    console.log('Monitoring these fields for Intern:', custom_fields);\n    \n    // Clear any existing handlers\n    remove_field_events(frm);\n    \n    // Attach event listeners to each field\n    custom_fields.forEach(field => {\n        if (frm.fields_dict[field] && frm.fields_dict[field].df) {\n            console.log('Adding event listener for field:', field);\n            \n            // Create handler function\n            const handler = function(frm) {\n                if (frm.doc.custom_employment_type === 'Intern') {\n                    console.log('Field changed:', field, 'Value:', frm.doc[field]);\n                    update_offer_terms(frm);\n                }\n            };\n            \n            // Store handler for later removal\n            field_handlers[field] = handler;\n            \n            // Attach the handler\n            frappe.ui.form.on('Job Offer', field, handler);\n        } else {\n            console.log('Field not found:', field);\n        }\n    });\n}\n\nfunction remove_field_events(frm) {\n    console.log('Removing field event handlers');\n    \n    // Remove all stored handlers\n    Object.keys(field_handlers).forEach(field => {\n        frappe.ui.form.off('Job Offer', field, field_handlers[field]);\n        console.log('Removed handler for field:', field);\n    });\n    \n    // Clear the handlers object\n    field_handlers = {};\n}\n\nfunction clear_internship_terms(frm) {\n    console.log('Clearing internship-specific terms');\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        const grid = child_table.grid;\n        \n        // Find and remove internship-specific rows\n        const rows_to_remove = [];\n        \n        grid.data.forEach((row, idx) => {\n            if (row.offer_term === 'Internship Details' || row.offer_term === 'Stipend and Benefits') {\n                rows_to_remove.push(row);\n            }\n        });\n        \n        // Remove the rows\n        rows_to_remove.forEach(row => {\n            frappe.model.remove_from_locals(grid.doctype, row.name);\n        });\n        \n        // Refresh the grid\n        grid.refresh();\n        frm.refresh_field('offer_terms');\n        \n        console.log('Cleared internship terms');\n    }\n}\n\nfunction calculate_period(frm) {\n    if (frm.doc.custom_start_date && frm.doc.custom_end_date) {\n        try {\n            const startDate = new Date(frm.doc.custom_start_date);\n            const endDate = new Date(frm.doc.custom_end_date);\n            \n            // Calculate total difference in days (inclusive)\n            const totalDays = Math.floor((endDate - startDate) / (24 * 60 * 60 * 1000)) + 1;\n            \n            // Calculate months accurately\n            let monthsDiff = 0;\n            let tempDate = new Date(startDate);\n            \n            // Add months until we exceed the end date\n            while (tempDate < endDate) {\n                tempDate.setMonth(tempDate.getMonth() + 1);\n                if (tempDate <= endDate) {\n                    monthsDiff++;\n                }\n            }\n            \n            // Calculate remaining days after full months\n            const lastFullMonth = new Date(startDate);\n            lastFullMonth.setMonth(lastFullMonth.getMonth() + monthsDiff);\n            const remainingDays = Math.floor((endDate - lastFullMonth) / (24 * 60 * 60 * 1000));\n            \n            // Calculate weeks\n            const weeksDiff = Math.floor(totalDays / 7);\n            const remainingDaysFromWeeks = totalDays % 7;\n            \n            let periodText = '';\n            \n            if (monthsDiff >= 1) {\n                periodText = `${monthsDiff} month${monthsDiff !== 1 ? 's' : ''}`;\n                if (remainingDays > 0) {\n                    periodText += ` ${remainingDays} day${remainingDays !== 1 ? 's' : ''}`;\n                }\n            } else if (weeksDiff >= 1) {\n                periodText = `${weeksDiff} week${weeksDiff !== 1 ? 's' : ''}`;\n                if (remainingDaysFromWeeks > 0) {\n                    periodText += ` ${remainingDaysFromWeeks} day${remainingDaysFromWeeks !== 1 ? 's' : ''}`;\n                }\n            } else {\n                periodText = `${totalDays} day${totalDays !== 1 ? 's' : ''}`;\n            }\n            \n            // Update the period field\n            frm.set_value('custom_period', periodText.trim());\n            console.log('Period calculated:', periodText.trim());\n            \n        } catch (error) {\n            console.error('Error calculating period:', error);\n        }\n    }\n}\n\nfunction update_offer_terms(frm) {\n    // Only update for Intern employment type\n    if (frm.doc.custom_employment_type !== 'Intern') {\n        console.log('Not an Intern, skipping offer terms update');\n        return;\n    }\n    \n    console.log('Updating offer terms for Intern');\n    \n    // Only update if a template is selected\n    if (!frm.doc.job_offer_term_template) {\n        console.log('No Job Offer Term Template selected, skipping update');\n        return;\n    }\n    \n    // Get values from custom fields - CORRECTED FIELD NAME\n    const department = frm.doc.custom_department || '[Department Name]';\n    const start_date = frm.doc.custom_start_date ? format_date(frm.doc.custom_start_date) : '[Start Date]';\n    const period = frm.doc.custom_period || '[X] months/weeks';\n    const work_location = frm.doc.custom_work_location || '[Office Address/Remote/Hybrid]';\n    const salary_stipend = frm.doc.custom_salary__stipend ? format_currency(frm.doc.custom_salary__stipend) : '[Amount]'; // Corrected\n    const supervisor = frm.doc.custom_supervisor_name || '[Supervisor Name and Designation]';\n    const end_date = frm.doc.custom_end_date ? format_date(frm.doc.custom_end_date) : '[End Date]';\n    const work_schedule = frm.doc.custom_work_schedule || '[Days and Hours]';\n    const designation = frm.doc.designation || '[Internship Position]';\n    const company = frm.doc.company || '[Company Name]';\n    \n    console.log('Field values:', {\n        department, start_date, period, work_location, \n        salary_stipend, supervisor, end_date, work_schedule, \n        designation, company\n    });\n    \n    // Create simple list format without HTML\n    const internship_details = \n        `• Position: ${designation}\\n` +\n        `• Department: ${department}\\n` +\n        `• Supervisor: ${supervisor}\\n` +\n        `• Duration: ${start_date} to ${end_date} (${period})\\n` +\n        `• Work Schedule: ${work_schedule}\\n` +\n        `• Work Location: ${work_location}`;\n    \n    const stipend_benefits = \n        `• Monthly Stipend: ${salary_stipend}`;\n    \n    console.log('Internship details:', internship_details);\n    console.log('Stipend benefits:', stipend_benefits);\n    \n    // Try to update existing rows first\n    const internship_updated = update_child_table_row_by_term(frm, 'Internship Details', internship_details);\n    const stipend_updated = update_child_table_row_by_term(frm, 'Stipend and Benefits', stipend_benefits);\n    \n    // If rows don't exist yet, add them\n    if (!internship_updated) {\n        console.log('Adding Internship Details row');\n        add_child_table_row(frm, 'Internship Details', internship_details);\n    }\n    \n    if (!stipend_updated) {\n        console.log('Adding Stipend and Benefits row');\n        add_child_table_row(frm, 'Stipend and Benefits', stipend_benefits);\n    }\n    \n    // Refresh the form to see changes\n    frm.refresh_field('offer_terms');\n}\n\nfunction update_child_table_row_by_term(frm, offer_term_value, new_value) {\n    console.log('Looking for offer term:', offer_term_value);\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        console.log('Child table found: offer_terms');\n        const grid = child_table.grid;\n        \n        // Find the row with the matching offer_term value\n        let target_row = null;\n        let row_index = -1;\n        \n        grid.data.forEach((row, idx) => {\n            if (row.offer_term === offer_term_value) {\n                target_row = row;\n                row_index = idx;\n                console.log('Found matching row at index:', idx, 'Row:', row);\n            }\n        });\n        \n        if (target_row) {\n            console.log('Updating row with value:', new_value);\n            // Update the value/description field\n            frappe.model.set_value(target_row.doctype, target_row.name, 'value', new_value);\n            console.log('Value updated successfully');\n            \n            // Refresh the grid to see changes\n            grid.refresh();\n            return true;\n        } else {\n            console.log('Row not found with offer_term:', offer_term_value);\n            console.log('Available rows:', grid.data.map(r => r && r.offer_term ? r.offer_term : 'undefined'));\n            return false;\n        }\n    } else {\n        console.log('Child table not found: offer_terms');\n        return false;\n    }\n}\n\nfunction add_child_table_row(frm, offer_term_value, value) {\n    console.log('Adding new row for:', offer_term_value);\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        // Add a new row\n        const new_row = frappe.model.add_child(frm.doc, 'Job Offer Term', 'offer_terms');\n        \n        // Set the values\n        new_row.offer_term = offer_term_value;\n        new_row.value = value;\n        \n        // Refresh the grid\n        child_table.grid.refresh();\n        \n        console.log('Row added successfully');\n        return true;\n    } else {\n        console.log('Child table not found: offer_terms');\n        return false;\n    }\n}\n\nfunction format_date(date_string) {\n    if (!date_string) return '';\n    \n    // Handle Frappe date format (YYYY-MM-DD)\n    const date_parts = date_string.split('-');\n    if (date_parts.length === 3) {\n        const date = new Date(date_parts[0], date_parts[1] - 1, date_parts[2]);\n        return date.toLocaleDateString('en-US', { \n            year: 'numeric', \n            month: 'long', \n            day: 'numeric' \n        });\n    }\n    \n    return date_string;\n}\n\nfunction format_currency(amount) {\n    if (!amount) return '';\n    \n    // Check if amount is already formatted\n    if (typeof amount === 'string' && amount.includes('$')) {\n        return amount;\n    }\n    \n    // Convert to number if it's a string\n    const numericAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    \n    return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'INR',\n        minimumFractionDigits: 2\n    }).format(numericAmount);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Offer",
  "enabled": 0,
  "modified": "2025-09-17 11:11:42.800207",
  "module": "Gen Hrms",
  "name": "Intern Offer Letter With Manual Inputs",
  "script": "// Client script for Job Offer Doctype\n// This script auto-populates the Offer Terms based on custom field values for Interns only\n\nfrappe.ui.form.on('Job Offer', {\n    refresh: function(frm) {\n        console.log('Job Offer form refreshed');\n        \n        // Check if employment type is Intern\n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Intern employment type detected, setting up field events');\n            setup_field_events(frm);\n            \n            // Also update terms when form refreshes\n            setTimeout(() => update_offer_terms(frm), 1000);\n        } else {\n            console.log('Not an Intern employment type, skipping setup');\n        }\n    },\n    \n    after_load: function(frm) {\n        console.log('Job Offer form loaded');\n        \n        // Update terms when form loads with existing data only for Interns\n        if (frm.doc.custom_employment_type === 'Intern') {\n            setTimeout(() => update_offer_terms(frm), 1000);\n        }\n    },\n    \n    // Handle template selection\n    job_offer_term_template: function(frm) {\n        // Only process for Interns\n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Job Offer Term Template selected:', frm.doc.job_offer_term_template);\n            // Update terms after a delay to allow template to load\n            setTimeout(() => update_offer_terms(frm), 1500);\n        }\n    },\n    \n    // Handle employment type change\n    custom_employment_type: function(frm) {\n        console.log('Employment type changed to:', frm.doc.custom_employment_type);\n        \n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Intern selected, setting up field events');\n            setup_field_events(frm);\n            update_offer_terms(frm);\n        } else {\n            console.log('Not an Intern, removing field events and clearing terms');\n            remove_field_events(frm);\n            clear_internship_terms(frm);\n        }\n    },\n    \n    // Handle is_paid field change\n    custom_is_paid: function(frm) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Is Paid field changed:', frm.doc.custom_is_paid);\n            update_offer_terms(frm);\n        }\n    },\n    \n    // Handle date changes to calculate period (only for Interns)\n    custom_start_date: function(frm) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            calculate_period(frm);\n            update_offer_terms(frm);\n        }\n    },\n    \n    custom_end_date: function(frm) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            calculate_period(frm);\n            update_offer_terms(frm);\n        }\n    },\n    \n    // Handle stipend amount change specifically - CORRECTED FIELD NAME (only for Interns)\n    custom_salary__stipend: function(frm) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Stipend amount changed:', frm.doc.custom_salary__stipend);\n            update_offer_terms(frm);\n        }\n    },\n    \n    // Add this to handle when the child table is populated (only for Interns)\n    offer_terms_add: function(frm) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Row added to offer_terms');\n            update_offer_terms(frm);\n        }\n    }\n});\n\n// Store field event handlers for cleanup\nlet field_handlers = {};\n\nfunction setup_field_events(frm) {\n    console.log('Setting up field events for Intern');\n    \n    // List of custom fields to monitor for changes - CORRECTED FIELD NAME\n    const custom_fields = [\n        'custom_department',\n        'custom_start_date',\n        'custom_period',\n        'custom_work_location',\n        'custom_salary__stipend', // Corrected: double underscore\n        'custom_supervisor',\n        'custom_end_date',\n        'custom_work_schedule',\n        'custom_is_paid', // Added is_paid field\n        'designation',\n        'company'\n    ];\n    \n    console.log('Monitoring these fields for Intern:', custom_fields);\n    \n    // Clear any existing handlers\n    remove_field_events(frm);\n    \n    // Attach event listeners to each field\n    custom_fields.forEach(field => {\n        if (frm.fields_dict[field] && frm.fields_dict[field].df) {\n            console.log('Adding event listener for field:', field);\n            \n            // Create handler function\n            const handler = function(frm) {\n                if (frm.doc.custom_employment_type === 'Intern') {\n                    console.log('Field changed:', field, 'Value:', frm.doc[field]);\n                    update_offer_terms(frm);\n                }\n            };\n            \n            // Store handler for later removal\n            field_handlers[field] = handler;\n            \n            // Attach the handler\n            frappe.ui.form.on('Job Offer', field, handler);\n        } else {\n            console.log('Field not found:', field);\n        }\n    });\n}\n\nfunction remove_field_events(frm) {\n    console.log('Removing field event handlers');\n    \n    // Remove all stored handlers\n    Object.keys(field_handlers).forEach(field => {\n        frappe.ui.form.off('Job Offer', field, field_handlers[field]);\n        console.log('Removed handler for field:', field);\n    });\n    \n    // Clear the handlers object\n    field_handlers = {};\n}\n\nfunction clear_internship_terms(frm) {\n    console.log('Clearing internship-specific terms');\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        const grid = child_table.grid;\n        \n        // Find and remove internship-specific rows\n        const rows_to_remove = [];\n        \n        grid.data.forEach((row, idx) => {\n            if (row.offer_term === 'Internship Details' || row.offer_term === 'Stipend and Benefits') {\n                rows_to_remove.push(row);\n            }\n        });\n        \n        // Remove the rows\n        rows_to_remove.forEach(row => {\n            frappe.model.remove_from_locals(grid.doctype, row.name);\n        });\n        \n        // Refresh the grid\n        grid.refresh();\n        frm.refresh_field('offer_terms');\n        \n        console.log('Cleared internship terms');\n    }\n}\n\nfunction calculate_period(frm) {\n    if (frm.doc.custom_start_date && frm.doc.custom_end_date) {\n        try {\n            const startDate = new Date(frm.doc.custom_start_date);\n            const endDate = new Date(frm.doc.custom_end_date);\n            \n            // Calculate total difference in days (inclusive)\n            const totalDays = Math.floor((endDate - startDate) / (24 * 60 * 60 * 1000)) + 1;\n            \n            // Calculate months accurately\n            let monthsDiff = 0;\n            let tempDate = new Date(startDate);\n            \n            // Add months until we exceed the end date\n            while (tempDate < endDate) {\n                tempDate.setMonth(tempDate.getMonth() + 1);\n                if (tempDate <= endDate) {\n                    monthsDiff++;\n                }\n            }\n            \n            // Calculate remaining days after full months\n            const lastFullMonth = new Date(startDate);\n            lastFullMonth.setMonth(lastFullMonth.getMonth() + monthsDiff);\n            const remainingDays = Math.floor((endDate - lastFullMonth) / (24 * 60 * 60 * 1000));\n            \n            // Calculate weeks\n            const weeksDiff = Math.floor(totalDays / 7);\n            const remainingDaysFromWeeks = totalDays % 7;\n            \n            let periodText = '';\n            \n            if (monthsDiff >= 1) {\n                periodText = `${monthsDiff} month${monthsDiff !== 1 ? 's' : ''}`;\n                if (remainingDays > 0) {\n                    periodText += ` ${remainingDays} day${remainingDays !== 1 ? 's' : ''}`;\n                }\n            } else if (weeksDiff >= 1) {\n                periodText = `${weeksDiff} week${weeksDiff !== 1 ? 's' : ''}`;\n                if (remainingDaysFromWeeks > 0) {\n                    periodText += ` ${remainingDaysFromWeeks} day${remainingDaysFromWeeks !== 1 ? 's' : ''}`;\n                }\n            } else {\n                periodText = `${totalDays} day${totalDays !== 1 ? 's' : ''}`;\n            }\n            \n            // Update the period field\n            frm.set_value('custom_period', periodText.trim());\n            console.log('Period calculated:', periodText.trim());\n            \n        } catch (error) {\n            console.error('Error calculating period:', error);\n        }\n    }\n}\n\nfunction update_offer_terms(frm) {\n    // Only update for Intern employment type\n    if (frm.doc.custom_employment_type !== 'Intern') {\n        console.log('Not an Intern, skipping offer terms update');\n        return;\n    }\n    \n    console.log('Updating offer terms for Intern');\n    \n    // Only update if a template is selected\n    if (!frm.doc.job_offer_term_template) {\n        console.log('No Job Offer Term Template selected, skipping update');\n        return;\n    }\n    \n    // Get values from custom fields - CORRECTED FIELD NAME\n    const department = frm.doc.custom_department || '[Department Name]';\n    const start_date = frm.doc.custom_start_date ? format_date(frm.doc.custom_start_date) : '[Start Date]';\n    const period = frm.doc.custom_period || '[X] months/weeks';\n    const work_location = frm.doc.custom_work_location || '[Office Address/Remote/Hybrid]';\n    const salary_stipend = frm.doc.custom_salary__stipend ? format_currency(frm.doc.custom_salary__stipend) : '[Amount]'; // Corrected\n    const supervisor = frm.doc.custom_supervisor_name || '[Supervisor Name and Designation]';\n    const end_date = frm.doc.custom_end_date ? format_date(frm.doc.custom_end_date) : '[End Date]';\n    const work_schedule = frm.doc.custom_work_schedule || '[Days and Hours]';\n    const designation = frm.doc.designation || '[Internship Position]';\n    const company = frm.doc.company || '[Company Name]';\n    const is_paid = frm.doc.custom_is_paid || 0;\n    \n    console.log('Field values:', {\n        department, start_date, period, work_location, \n        salary_stipend, supervisor, end_date, work_schedule, \n        designation, company, is_paid\n    });\n    \n    // Create simple list format without HTML\n    const internship_details = \n        `• Position: ${designation}\\n` +\n        `• Department: ${department}\\n` +\n        `• Supervisor: ${supervisor}\\n` +\n        `• Duration: ${start_date} to ${end_date} (${period})\\n` +\n        `• Work Schedule: ${work_schedule}\\n` +\n        `• Work Location: ${work_location}`;\n    \n    const stipend_benefits = \n        `• Monthly Stipend: ${salary_stipend}`;\n    \n    console.log('Internship details:', internship_details);\n    console.log('Stipend benefits:', stipend_benefits);\n    \n    // Try to update existing rows first\n    const internship_updated = update_child_table_row_by_term(frm, 'Internship Details', internship_details);\n    \n    // Only add/update stipend if is_paid is 1\n    let stipend_updated = false;\n    if (is_paid === 1) {\n        stipend_updated = update_child_table_row_by_term(frm, 'Stipend and Benefits', stipend_benefits);\n    } else {\n        // Remove stipend row if it exists but is_paid is not 1\n        remove_child_table_row_by_term(frm, 'Stipend and Benefits');\n    }\n    \n    // If rows don't exist yet, add them\n    if (!internship_updated) {\n        console.log('Adding Internship Details row');\n        add_child_table_row(frm, 'Internship Details', internship_details);\n    }\n    \n    if (is_paid === 1 && !stipend_updated) {\n        console.log('Adding Stipend and Benefits row');\n        add_child_table_row(frm, 'Stipend and Benefits', stipend_benefits);\n    }\n    \n    // Refresh the form to see changes\n    frm.refresh_field('offer_terms');\n}\n\nfunction update_child_table_row_by_term(frm, offer_term_value, new_value) {\n    console.log('Looking for offer term:', offer_term_value);\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        console.log('Child table found: offer_terms');\n        const grid = child_table.grid;\n        \n        // Find the row with the matching offer_term value\n        let target_row = null;\n        let row_index = -1;\n        \n        grid.data.forEach((row, idx) => {\n            if (row.offer_term === offer_term_value) {\n                target_row = row;\n                row_index = idx;\n                console.log('Found matching row at index:', idx, 'Row:', row);\n            }\n        });\n        \n        if (target_row) {\n            console.log('Updating row with value:', new_value);\n            // Update the value/description field\n            frappe.model.set_value(target_row.doctype, target_row.name, 'value', new_value);\n            console.log('Value updated successfully');\n            \n            // Refresh the grid to see changes\n            grid.refresh();\n            return true;\n        } else {\n            console.log('Row not found with offer_term:', offer_term_value);\n            console.log('Available rows:', grid.data.map(r => r && r.offer_term ? r.offer_term : 'undefined'));\n            return false;\n        }\n    } else {\n        console.log('Child table not found: offer_terms');\n        return false;\n    }\n}\n\nfunction remove_child_table_row_by_term(frm, offer_term_value) {\n    console.log('Looking for offer term to remove:', offer_term_value);\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        console.log('Child table found: offer_terms');\n        const grid = child_table.grid;\n        \n        // Find the row with the matching offer_term value\n        let target_row = null;\n        let row_index = -1;\n        \n        grid.data.forEach((row, idx) => {\n            if (row.offer_term === offer_term_value) {\n                target_row = row;\n                row_index = idx;\n                console.log('Found matching row at index:', idx, 'Row:', row);\n            }\n        });\n        \n        if (target_row) {\n            console.log('Removing row:', target_row);\n            // Remove the row\n            frappe.model.remove_from_locals(grid.doctype, target_row.name);\n            \n            // Refresh the grid to see changes\n            grid.refresh();\n            return true;\n        } else {\n            console.log('Row not found with offer_term:', offer_term_value);\n            return false;\n        }\n    } else {\n        console.log('Child table not found: offer_terms');\n        return false;\n    }\n}\n\nfunction add_child_table_row(frm, offer_term_value, value) {\n    console.log('Adding new row for:', offer_term_value);\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        // Add a new row\n        const new_row = frappe.model.add_child(frm.doc, 'Job Offer Term', 'offer_terms');\n        \n        // Set the values\n        new_row.offer_term = offer_term_value;\n        new_row.value = value;\n        \n        // Refresh the grid\n        child_table.grid.refresh();\n        \n        console.log('Row added successfully');\n        return true;\n    } else {\n        console.log('Child table not found: offer_terms');\n        return false;\n    }\n}\n\nfunction format_date(date_string) {\n    if (!date_string) return '';\n    \n    // Handle Frappe date format (YYYY-MM-DD)\n    const date_parts = date_string.split('-');\n    if (date_parts.length === 3) {\n        const date = new Date(date_parts[0], date_parts[1] - 1, date_parts[2]);\n        return date.toLocaleDateString('en-US', { \n            year: 'numeric', \n            month: 'long', \n            day: 'numeric' \n        });\n    }\n    \n    return date_string;\n}\n\nfunction format_currency(amount) {\n    if (!amount) return '';\n    \n    // Check if amount is already formatted\n    if (typeof amount === 'string' && amount.includes('$')) {\n        return amount;\n    }\n    \n    // Convert to number if it's a string\n    const numericAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    \n    return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'INR',\n        minimumFractionDigits: 2\n    }).format(numericAmount);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Offer",
  "enabled": 1,
  "modified": "2025-10-29 15:13:18.437348",
  "module": "Gen Hrms",
  "name": "Job Offer Stipend Field removed",
  "script": "// Client script for Job Offer Doctype\n// This script auto-populates the Offer Terms based on custom field values for Interns only\n\n// Track user modifications to prevent re-adding removed rows\nlet userRemovedStipend = false;\n\nfrappe.ui.form.on('Job Offer', {\n    refresh: function(frm) {\n        console.log('Job Offer form refreshed');\n        \n        // Check if employment type is Intern\n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Intern employment type detected, setting up field events');\n            setup_field_events(frm);\n            \n            // Also update terms when form refreshes\n            setTimeout(() => update_offer_terms(frm), 1000);\n        } else {\n            console.log('Not an Intern employment type, skipping setup');\n        }\n    },\n    \n    after_load: function(frm) {\n        console.log('Job Offer form loaded');\n        \n        // Update terms when form loads with existing data only for Interns\n        if (frm.doc.custom_employment_type === 'Intern') {\n            setTimeout(() => update_offer_terms(frm), 1000);\n        }\n        \n        // Reset user removal tracking when form loads\n        userRemovedStipend = false;\n    },\n    \n    // Handle template selection\n    job_offer_term_template: function(frm) {\n        // Only process for Interns\n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Job Offer Term Template selected:', frm.doc.job_offer_term_template);\n            // Update terms after a delay to allow template to load\n            setTimeout(() => update_offer_terms(frm), 1500);\n        }\n    },\n    \n    // Handle employment type change\n    custom_employment_type: function(frm) {\n        console.log('Employment type changed to:', frm.doc.custom_employment_type);\n        \n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Intern selected, setting up field events');\n            setup_field_events(frm);\n            update_offer_terms(frm);\n        } else {\n            console.log('Not an Intern, removing field events and clearing terms');\n            remove_field_events(frm);\n            clear_internship_terms(frm);\n        }\n        \n        // Reset user removal tracking when employment type changes\n        userRemovedStipend = false;\n    },\n    \n    // Handle is_paid field change\n    custom_is_paid: function(frm) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Is Paid field changed:', frm.doc.custom_is_paid);\n            update_offer_terms(frm);\n        }\n    },\n    \n    // Handle date changes to calculate period (only for Interns)\n    custom_start_date: function(frm) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            calculate_period(frm);\n            update_offer_terms(frm);\n        }\n    },\n    \n    custom_end_date: function(frm) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            calculate_period(frm);\n            update_offer_terms(frm);\n        }\n    },\n    \n    // Handle stipend amount change specifically - CORRECTED FIELD NAME (only for Interns)\n    custom_salary__stipend: function(frm) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Stipend amount changed:', frm.doc.custom_salary__stipend);\n            update_offer_terms(frm);\n        }\n    },\n    \n    // Add this to handle when the child table is populated (only for Interns)\n    offer_terms_add: function(frm) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            console.log('Row added to offer_terms');\n            update_offer_terms(frm);\n        }\n    },\n    \n    // Track when user removes a row\n    offer_terms_remove: function(frm, cdt, cdn) {\n        if (frm.doc.custom_employment_type === 'Intern') {\n            const row = frappe.get_doc(cdt, cdn);\n            if (row.offer_term === 'Stipend and Benefits') {\n                console.log('User removed Stipend row manually');\n                userRemovedStipend = true;\n            }\n        }\n    }\n});\n\n// Store field event handlers for cleanup\nlet field_handlers = {};\n\nfunction setup_field_events(frm) {\n    console.log('Setting up field events for Intern');\n    \n    // List of custom fields to monitor for changes - CORRECTED FIELD NAME\n    const custom_fields = [\n        'custom_department',\n        'custom_start_date',\n        'custom_period',\n        'custom_work_location',\n        'custom_salary__stipend', // Corrected: double underscore\n        // 'custom_supervisor',\n        'custom_end_date',\n        'custom_work_schedule',\n        'custom_is_paid', // Added is_paid field\n        'designation',\n        'company'\n    ];\n    \n    console.log('Monitoring these fields for Intern:', custom_fields);\n    \n    // Clear any existing handlers\n    remove_field_events(frm);\n    \n    // Attach event listeners to each field\n    custom_fields.forEach(field => {\n        if (frm.fields_dict[field] && frm.fields_dict[field].df) {\n            console.log('Adding event listener for field:', field);\n            \n            // Create handler function\n            const handler = function(frm) {\n                if (frm.doc.custom_employment_type === 'Intern') {\n                    console.log('Field changed:', field, 'Value:', frm.doc[field]);\n                    update_offer_terms(frm);\n                }\n            };\n            \n            // Store handler for later removal\n            field_handlers[field] = handler;\n            \n            // Attach the handler\n            frappe.ui.form.on('Job Offer', field, handler);\n        } else {\n            console.log('Field not found:', field);\n        }\n    });\n}\n\nfunction remove_field_events(frm) {\n    console.log('Removing field event handlers');\n    \n    // Remove all stored handlers\n    Object.keys(field_handlers).forEach(field => {\n        frappe.ui.form.off('Job Offer', field, field_handlers[field]);\n        console.log('Removed handler for field:', field);\n    });\n    \n    // Clear the handlers object\n    field_handlers = {};\n}\n\nfunction clear_internship_terms(frm) {\n    console.log('Clearing internship-specific terms');\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        const grid = child_table.grid;\n        \n        // Find and remove internship-specific rows\n        const rows_to_remove = [];\n        \n        grid.data.forEach((row, idx) => {\n            if (row.offer_term === 'Internship Details' || row.offer_term === 'Stipend and Benefits') {\n                rows_to_remove.push(row);\n            }\n        });\n        \n        // Remove the rows\n        rows_to_remove.forEach(row => {\n            frappe.model.remove_from_locals(grid.doctype, row.name);\n        });\n        \n        // Refresh the grid\n        grid.refresh();\n        frm.refresh_field('offer_terms');\n        \n        console.log('Cleared internship terms');\n    }\n}\n\nfunction calculate_period(frm) {\n    if (frm.doc.custom_start_date && frm.doc.custom_end_date) {\n        try {\n            const startDate = new Date(frm.doc.custom_start_date);\n            const endDate = new Date(frm.doc.custom_end_date);\n            \n            // Calculate total difference in days (inclusive)\n            const totalDays = Math.floor((endDate - startDate) / (24 * 60 * 60 * 1000)) + 1;\n            \n            // Calculate months accurately\n            let monthsDiff = 0;\n            let tempDate = new Date(startDate);\n            \n            // Add months until we exceed the end date\n            while (tempDate < endDate) {\n                tempDate.setMonth(tempDate.getMonth() + 1);\n                if (tempDate <= endDate) {\n                    monthsDiff++;\n                }\n            }\n            \n            // Calculate remaining days after full months\n            const lastFullMonth = new Date(startDate);\n            lastFullMonth.setMonth(lastFullMonth.getMonth() + monthsDiff);\n            const remainingDays = Math.floor((endDate - lastFullMonth) / (24 * 60 * 60 * 1000));\n            \n            // Calculate weeks\n            const weeksDiff = Math.floor(totalDays / 7);\n            const remainingDaysFromWeeks = totalDays % 7;\n            \n            let periodText = '';\n            \n            if (monthsDiff >= 1) {\n                periodText = `${monthsDiff} month${monthsDiff !== 1 ? 's' : ''}`;\n                if (remainingDays > 0) {\n                    periodText += ` ${remainingDays} day${remainingDays !== 1 ? 's' : ''}`;\n                }\n            } else if (weeksDiff >= 1) {\n                periodText = `${weeksDiff} week${weeksDiff !== 1 ? 's' : ''}`;\n                if (remainingDaysFromWeeks > 0) {\n                    periodText += ` ${remainingDaysFromWeeks} day${remainingDaysFromWeeks !== 1 ? 's' : ''}`;\n                }\n            } else {\n                periodText = `${totalDays} day${totalDays !== 1 ? 's' : ''}`;\n            }\n            \n            // Update the period field\n            frm.set_value('custom_period', periodText.trim());\n            console.log('Period calculated:', periodText.trim());\n            \n        } catch (error) {\n            console.error('Error calculating period:', error);\n        }\n    }\n}\n\nfunction update_offer_terms(frm) {\n    // Only update for Intern employment type\n    if (frm.doc.custom_employment_type !== 'Intern') {\n        console.log('Not an Intern, skipping offer terms update');\n        return;\n    }\n    \n    console.log('Updating offer terms for Intern');\n    \n    // Only update if a template is selected\n    if (!frm.doc.job_offer_term_template) {\n        console.log('No Job Offer Term Template selected, skipping update');\n        return;\n    }\n    \n    // Get values from custom fields - CORRECTED FIELD NAME\n    const department = frm.doc.custom_department || '[Department Name]';\n    const start_date = frm.doc.custom_start_date ? format_date(frm.doc.custom_start_date) : '[Start Date]';\n    const period = frm.doc.custom_period || '[X] months/weeks';\n    const work_location = frm.doc.custom_work_location || '[Office Address/Remote/Hybrid]';\n    const salary_stipend = frm.doc.custom_salary__stipend ? format_currency(frm.doc.custom_salary__stipend) : '[Amount]'; // Corrected\n    // const supervisor = frm.doc.custom_supervisor_name || '[Supervisor Name and Designation]';\n    const end_date = frm.doc.custom_end_date ? format_date(frm.doc.custom_end_date) : '[End Date]';\n    const work_schedule = frm.doc.custom_work_schedule || '[Days and Hours]';\n    const designation = frm.doc.designation || '[Internship Position]';\n    const company = frm.doc.company || '[Company Name]';\n    const is_paid = frm.doc.custom_is_paid || 0;\n    \n    console.log('Field values:', {\n        department, start_date, period, work_location, \n        salary_stipend, supervisor, end_date, work_schedule, \n        designation, company, is_paid\n    });\n    \n    // Create simple list format without HTML\n    const internship_details = \n        `• Position: ${designation}\\n` +\n        `• Department: ${department}\\n` +\n        `• Supervisor: This may subject to change from assignment to assignment\\n` +\n        `• Duration: ${start_date} to ${end_date} (${period})\\n` +\n        `• Work Schedule: ${work_schedule}\\n` +\n        `• Work Location: ${work_location}`;\n    \n    const stipend_benefits = \n        `• Monthly Stipend: ${salary_stipend}`;\n    \n    console.log('Internship details:', internship_details);\n    console.log('Stipend benefits:', stipend_benefits);\n    \n    // Try to update existing rows first\n    const internship_updated = update_child_table_row_by_term(frm, 'Internship Details', internship_details);\n    \n    // Only add/update stipend if is_paid is 1 AND user hasn't manually removed it\n    let stipend_updated = false;\n    if (is_paid === 1 && !userRemovedStipend) {\n        stipend_updated = update_child_table_row_by_term(frm, 'Stipend and Benefits', stipend_benefits);\n    } else {\n        // Remove stipend row if it exists but is_paid is not 1\n        remove_child_table_row_by_term(frm, 'Stipend and Benefits');\n    }\n    \n    // If rows don't exist yet, add them\n    if (!internship_updated) {\n        console.log('Adding Internship Details row');\n        add_child_table_row(frm, 'Internship Details', internship_details);\n    }\n    \n    if (is_paid === 1 && !stipend_updated && !userRemovedStipend) {\n        console.log('Adding Stipend and Benefits row');\n        add_child_table_row(frm, 'Stipend and Benefits', stipend_benefits);\n    }\n    \n    // Refresh the form to see changes\n    frm.refresh_field('offer_terms');\n}\n\nfunction update_child_table_row_by_term(frm, offer_term_value, new_value) {\n    console.log('Looking for offer term:', offer_term_value);\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        console.log('Child table found: offer_terms');\n        const grid = child_table.grid;\n        \n        // Find the row with the matching offer_term value\n        let target_row = null;\n        let row_index = -1;\n        \n        grid.data.forEach((row, idx) => {\n            if (row.offer_term === offer_term_value) {\n                target_row = row;\n                row_index = idx;\n                console.log('Found matching row at index:', idx, 'Row:', row);\n            }\n        });\n        \n        if (target_row) {\n            console.log('Updating row with value:', new_value);\n            // Update the value/description field\n            frappe.model.set_value(target_row.doctype, target_row.name, 'value', new_value);\n            console.log('Value updated successfully');\n            \n            // Refresh the grid to see changes\n            grid.refresh();\n            return true;\n        } else {\n            console.log('Row not found with offer_term:', offer_term_value);\n            console.log('Available rows:', grid.data.map(r => r && r.offer_term ? r.offer_term : 'undefined'));\n            return false;\n        }\n    } else {\n        console.log('Child table not found: offer_terms');\n        return false;\n    }\n}\n\nfunction remove_child_table_row_by_term(frm, offer_term_value) {\n    console.log('Looking for offer term to remove:', offer_term_value);\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        console.log('Child table found: offer_terms');\n        const grid = child_table.grid;\n        \n        // Find the row with the matching offer_term value\n        let target_row = null;\n        let row_index = -1;\n        \n        grid.data.forEach((row, idx) => {\n            if (row.offer_term === offer_term_value) {\n                target_row = row;\n                row_index = idx;\n                console.log('Found matching row at index:', idx, 'Row:', row);\n            }\n        });\n        \n        if (target_row) {\n            console.log('Removing row:', target_row);\n            \n            // Get the row's docname\n            const docname = target_row.name;\n            \n            // Remove from grid data\n            grid.data.splice(row_index, 1);\n            \n            // Remove from locals\n            frappe.model.remove_from_locals(grid.doctype, docname);\n            \n            // Remove from the form's doc\n            const offer_terms = frm.doc.offer_terms || [];\n            for (let i = offer_terms.length - 1; i >= 0; i--) {\n                if (offer_terms[i].name === docname) {\n                    offer_terms.splice(i, 1);\n                    break;\n                }\n            }\n            \n            // Refresh the grid to see changes\n            grid.refresh();\n            frm.refresh_field('offer_terms');\n            \n            console.log('Row completely removed');\n            return true;\n        } else {\n            console.log('Row not found with offer_term:', offer_term_value);\n            return false;\n        }\n    } else {\n        console.log('Child table not found: offer_terms');\n        return false;\n    }\n}\nfunction add_child_table_row(frm, offer_term_value, value) {\n    console.log('Adding new row for:', offer_term_value);\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        // Add a new row\n        const new_row = frappe.model.add_child(frm.doc, 'Job Offer Term', 'offer_terms');\n        \n        // Set the values\n        new_row.offer_term = offer_term_value;\n        new_row.value = value;\n        \n        // Refresh the grid\n        child_table.grid.refresh();\n        \n        console.log('Row added successfully');\n        return true;\n    } else {\n        console.log('Child table not found: offer_terms');\n        return false;\n    }\n}\n\nfunction format_date(date_string) {\n    if (!date_string) return '';\n    \n    // Handle Frappe date format (YYYY-MM-DD)\n    const date_parts = date_string.split('-');\n    if (date_parts.length === 3) {\n        const date = new Date(date_parts[0], date_parts[1] - 1, date_parts[2]);\n        return date.toLocaleDateString('en-US', { \n            year: 'numeric', \n            month: 'long', \n            day: 'numeric' \n        });\n    }\n    \n    return date_string;\n}\n\nfunction format_currency(amount) {\n    if (!amount) return '';\n    \n    // Check if amount is already formatted\n    if (typeof amount === 'string' && amount.includes('$')) {\n        return amount;\n    }\n    \n    // Convert to number if it's a string\n    const numericAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    \n    return new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'INR',\n        minimumFractionDigits: 2\n    }).format(numericAmount);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Job Offer",
  "enabled": 1,
  "modified": "2025-09-17 13:51:29.453878",
  "module": "Gen Hrms",
  "name": "Job Offer for Employee",
  "script": "// Client script for Job Offer Doctype - Full-time Employee\n// This script auto-populates the Offer Terms based on custom field values for Full-time employees only\n\n// Track user modifications to prevent re-adding removed rows\nlet userRemovedCompensation = false;\nlet userRemovedPosition = false;\nlet userRemovedEmployment = false;\nlet manuallyEdited = {\n    'Position and Reporting': false,\n    'Compensation and Benefits': false,\n    'Employment Terms': false\n};\n\n// Track initial values to detect manual changes\nlet initialValues = {};\n\nfrappe.ui.form.on('Job Offer', {\n    refresh: function(frm) {\n        console.log('Job Offer form refreshed');\n        \n        // Check if employment type is Full-time\n        if (frm.doc.custom_employment_type === 'Full-time') {\n            console.log('Full-time employment type detected, setting up field events');\n            setup_fulltime_field_events(frm);\n            \n            // Store initial values and update terms when form refreshes\n            setTimeout(() => {\n                store_initial_values(frm);\n                update_fulltime_offer_terms(frm);\n            }, 1000);\n        } else {\n            console.log('Not a Full-time employment type, skipping setup');\n        }\n    },\n    \n    after_load: function(frm) {\n        console.log('Job Offer form loaded');\n        \n        // Update terms when form loads with existing data only for Full-time\n        if (frm.doc.custom_employment_type === 'Full-time') {\n            setTimeout(() => {\n                store_initial_values(frm);\n                update_fulltime_offer_terms(frm);\n            }, 1000);\n        }\n        \n        // Reset user removal tracking when form loads\n        reset_tracking_flags();\n    },\n    \n    // Handle template selection\n    job_offer_term_template: function(frm) {\n        // Only process for Full-time\n        if (frm.doc.custom_employment_type === 'Full-time') {\n            console.log('Job Offer Term Template selected:', frm.doc.job_offer_term_template);\n            // Reset manual edit flags when template changes\n            reset_manual_edit_flags();\n            // Update terms after a delay to allow template to load\n            setTimeout(() => {\n                store_initial_values(frm);\n                update_fulltime_offer_terms(frm);\n            }, 1500);\n        }\n    },\n    \n    // Handle employment type change\n    custom_employment_type: function(frm) {\n        console.log('Employment type changed to:', frm.doc.custom_employment_type);\n        \n        if (frm.doc.custom_employment_type === 'Full-time') {\n            console.log('Full-time selected, setting up field events');\n            setup_fulltime_field_events(frm);\n            reset_manual_edit_flags();\n            setTimeout(() => {\n                store_initial_values(frm);\n                update_fulltime_offer_terms(frm);\n            }, 500);\n        } else {\n            console.log('Not a Full-time employee, removing field events and clearing terms');\n            remove_fulltime_field_events(frm);\n            clear_fulltime_terms(frm);\n        }\n        \n        // Reset user removal tracking when employment type changes\n        reset_tracking_flags();\n    },\n    \n    // Handle joining date change\n    offer_date: function(frm) {\n        if (frm.doc.custom_employment_type === 'Full-time') {\n            console.log('Joining date changed:', frm.doc.offer_date);\n            update_fulltime_offer_terms(frm);\n        }\n    },\n    \n    // Handle salary changes for Full-time\n    custom_basic_salary: function(frm) {\n        if (frm.doc.custom_employment_type === 'Full-time') {\n            console.log('Basic salary changed:', frm.doc.custom_basic_salary);\n            update_fulltime_offer_terms(frm);\n        }\n    },\n    \n    custom_monthly_gross_salary: function(frm) {\n        if (frm.doc.custom_employment_type === 'Full-time') {\n            console.log('Monthly gross salary changed:', frm.doc.custom_monthly_gross_salary);\n            update_fulltime_offer_terms(frm);\n        }\n    },\n    \n    custom_annual_ctc: function(frm) {\n        if (frm.doc.custom_employment_type === 'Full-time') {\n            console.log('Annual CTC changed:', frm.doc.custom_annual_ctc);\n            update_fulltime_offer_terms(frm);\n        }\n    },\n    \n    custom_hra: function(frm) {\n        if (frm.doc.custom_employment_type === 'Full-time') {\n            console.log('HRA changed:', frm.doc.custom_hra);\n            update_fulltime_offer_terms(frm);\n        }\n    },\n    \n    custom_special_allowance: function(frm) {\n        if (frm.doc.custom_employment_type === 'Full-time') {\n            console.log('Special allowance changed:', frm.doc.custom_special_allowance);\n            update_fulltime_offer_terms(frm);\n        }\n    },\n    \n    custom_professional_development_allowance: function(frm) {\n        if (frm.doc.custom_employment_type === 'Full-time') {\n            console.log('Professional development allowance changed:', frm.doc.custom_professional_development_allowance);\n            update_fulltime_offer_terms(frm);\n        }\n    },\n    \n    custom_probation_period: function(frm) {\n        if (frm.doc.custom_employment_type === 'Full-time') {\n            console.log('Probation period changed:', frm.doc.custom_probation_period);\n            update_fulltime_offer_terms(frm);\n        }\n    },\n    \n    custom_notice_period: function(frm) {\n        if (frm.doc.custom_employment_type === 'Full-time') {\n            console.log('Notice period changed:', frm.doc.custom_notice_period);\n            update_fulltime_offer_terms(frm);\n        }\n    },\n    \n    // Track when user removes a row\n    offer_terms_remove: function(frm, cdt, cdn) {\n        if (frm.doc.custom_employment_type === 'Full-time') {\n            const row = frappe.get_doc(cdt, cdn);\n            if (row.offer_term === 'Compensation and Benefits') {\n                console.log('User removed Compensation row manually');\n                userRemovedCompensation = true;\n            } else if (row.offer_term === 'Position and Reporting') {\n                console.log('User removed Position row manually');\n                userRemovedPosition = true;\n            } else if (row.offer_term === 'Employment Terms') {\n                console.log('User removed Employment row manually');\n                userRemovedEmployment = true;\n            }\n        }\n    }\n});\n\n// Child table events to detect manual edits\nfrappe.ui.form.on('Job Offer Term', {\n    value: function(frm, cdt, cdn) {\n        if (frm.doc.custom_employment_type === 'Full-time') {\n            const row = frappe.get_doc(cdt, cdn);\n            if (row.offer_term && ['Position and Reporting', 'Compensation and Benefits', 'Employment Terms'].includes(row.offer_term)) {\n                // Check if this is a manual edit by comparing with what we would auto-generate\n                const auto_generated_value = get_auto_generated_value(frm, row.offer_term);\n                \n                // If the current value is different from auto-generated, mark as manually edited\n                if (row.value && row.value !== auto_generated_value) {\n                    console.log('Manual edit detected for:', row.offer_term);\n                    console.log('Current value:', row.value);\n                    console.log('Auto-generated value:', auto_generated_value);\n                    manuallyEdited[row.offer_term] = true;\n                }\n            }\n        }\n    }\n});\n\n// Store field event handlers for cleanup\nlet fulltime_field_handlers = {};\n\nfunction reset_tracking_flags() {\n    userRemovedCompensation = false;\n    userRemovedPosition = false;\n    userRemovedEmployment = false;\n}\n\nfunction reset_manual_edit_flags() {\n    manuallyEdited = {\n        'Position and Reporting': false,\n        'Compensation and Benefits': false,\n        'Employment Terms': false\n    };\n}\n\nfunction store_initial_values(frm) {\n    // Store initial values of the offer terms\n    if (frm.doc.offer_terms) {\n        frm.doc.offer_terms.forEach(row => {\n            if (['Position and Reporting', 'Compensation and Benefits', 'Employment Terms'].includes(row.offer_term)) {\n                initialValues[row.offer_term] = row.value;\n            }\n        });\n    }\n}\n\nfunction get_auto_generated_value(frm, offer_term) {\n    // Generate the auto-populated value for comparison\n    const department = frm.doc.custom_department || '[Department Name]';\n    const work_location = frm.doc.custom_work_location || '[Office Address/Remote/Hybrid]';\n    const supervisor = frm.doc.custom_supervisor_name || '[Manager Name and Designation]';\n    const work_schedule = frm.doc.custom_work_schedule || '[Days and Hours]';\n    const designation = frm.doc.designation || '[Position Title]';\n    const company = frm.doc.company || '[Company Name]';\n    const joining_date = frm.doc.offer_date ? format_date(frm.doc.offer_date) : '[Joining Date]';\n    \n    // Salary and benefits fields\n    const annual_ctc = frm.doc.custom_annual_ctc ? format_currency(frm.doc.custom_annual_ctc) : '[Amount]';\n    const monthly_gross = frm.doc.custom_monthly_gross_salary ? format_currency(frm.doc.custom_monthly_gross_salary) : '[Amount]';\n    const basic_salary = frm.doc.custom_basic_salary ? format_currency(frm.doc.custom_basic_salary) : '[Amount]';\n    const hra = frm.doc.custom_hra ? format_currency(frm.doc.custom_hra) : '[Amount]';\n    const special_allowance = frm.doc.custom_special_allowance ? format_currency(frm.doc.custom_special_allowance) : '[Amount]';\n    const prof_dev_allowance = frm.doc.custom_professional_development_allowance ? format_currency(frm.doc.custom_professional_development_allowance) : '[Amount]';\n    \n    // Other terms\n    const probation_period = frm.doc.custom_probation_period || '[X] months';\n    const notice_period = frm.doc.custom_notice_period || '[X] months';\n    \n    switch (offer_term) {\n        case 'Position and Reporting':\n            return `• Designation: ${designation}\\n• Department: ${department}\\n• Reporting Manager: ${supervisor}\\n• Work Location: ${work_location}`;\n        case 'Compensation and Benefits':\n            return `• Annual CTC: ${annual_ctc} per annum\\n• Monthly Gross Salary: ${monthly_gross}\\n• Basic Salary: ${basic_salary}\\n• House Rent Allowance (HRA): ${hra}\\n• Special Allowance: ${special_allowance}\\n• Professional Development Allowance: ${prof_dev_allowance} (up to per annum)`;\n        case 'Employment Terms':\n            return `• Employment Type: Permanent/Full-time\\n• Probation Period: ${probation_period} from the date of joining\\n• Notice Period: ${notice_period} as per company policy\\n• Working Hours: ${work_schedule}\\n• Date of Joining: ${joining_date}`;\n        default:\n            return '';\n    }\n}\n\nfunction setup_fulltime_field_events(frm) {\n    console.log('Setting up field events for Full-time');\n    \n    // List of custom fields to monitor for changes for Full-time employees\n    const fulltime_custom_fields = [\n        'custom_department',\n        'custom_work_location',\n        'custom_supervisor',\n        'custom_work_schedule',\n        'custom_basic_salary',\n        'custom_monthly_gross_salary',\n        'custom_annual_ctc',\n        'custom_hra',\n        'custom_special_allowance',\n        'custom_professional_development_allowance',\n        'custom_probation_period',\n        'custom_notice_period',\n        'designation',\n        'company',\n        'offer_date'\n    ];\n    \n    console.log('Monitoring these fields for Full-time:', fulltime_custom_fields);\n    \n    // Clear any existing handlers\n    remove_fulltime_field_events(frm);\n    \n    // Attach event listeners to each field\n    fulltime_custom_fields.forEach(field => {\n        if (frm.fields_dict[field] && frm.fields_dict[field].df) {\n            console.log('Adding event listener for field:', field);\n            \n            // Create handler function\n            const handler = function(frm) {\n                if (frm.doc.custom_employment_type === 'Full-time') {\n                    console.log('Field changed:', field, 'Value:', frm.doc[field]);\n                    update_fulltime_offer_terms(frm);\n                }\n            };\n            \n            // Store handler for later removal\n            fulltime_field_handlers[field] = handler;\n            \n            // Attach the handler\n            frappe.ui.form.on('Job Offer', field, handler);\n        } else {\n            console.log('Field not found:', field);\n        }\n    });\n}\n\nfunction remove_fulltime_field_events(frm) {\n    console.log('Removing fulltime field event handlers');\n    \n    // Remove all stored handlers\n    Object.keys(fulltime_field_handlers).forEach(field => {\n        frappe.ui.form.off('Job Offer', field, fulltime_field_handlers[field]);\n        console.log('Removed handler for field:', field);\n    });\n    \n    // Clear the handlers object\n    fulltime_field_handlers = {};\n}\n\nfunction clear_fulltime_terms(frm) {\n    console.log('Clearing full-time specific terms');\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        const grid = child_table.grid;\n        \n        // Find and remove full-time specific rows\n        const rows_to_remove = [];\n        \n        grid.data.forEach((row, idx) => {\n            if (row.offer_term === 'Position and Reporting' || \n                row.offer_term === 'Compensation and Benefits' || \n                row.offer_term === 'Employment Terms') {\n                rows_to_remove.push(row);\n            }\n        });\n        \n        // Remove the rows\n        rows_to_remove.forEach(row => {\n            frappe.model.remove_from_locals(grid.doctype, row.name);\n        });\n        \n        // Refresh the grid\n        grid.refresh();\n        frm.refresh_field('offer_terms');\n        \n        console.log('Cleared full-time terms');\n    }\n    \n    // Reset tracking flags\n    reset_tracking_flags();\n    reset_manual_edit_flags();\n}\n\nfunction update_fulltime_offer_terms(frm) {\n    // Only update for Full-time employment type\n    if (frm.doc.custom_employment_type !== 'Full-time') {\n        console.log('Not a Full-time employee, skipping offer terms update');\n        return;\n    }\n    \n    console.log('Updating offer terms for Full-time employee');\n    \n    // Only update if a template is selected\n    if (!frm.doc.job_offer_term_template) {\n        console.log('No Job Offer Term Template selected, skipping update');\n        return;\n    }\n    \n    // Get values from custom fields\n    const department = frm.doc.custom_department || '[Department Name]';\n    const work_location = frm.doc.custom_work_location || '[Office Address/Remote/Hybrid]';\n    const supervisor = frm.doc.custom_supervisor_name || '[Manager Name and Designation]';\n    const work_schedule = frm.doc.custom_work_schedule || '[Days and Hours]';\n    const designation = frm.doc.designation || '[Position Title]';\n    const company = frm.doc.company || '[Company Name]';\n    const joining_date = frm.doc.offer_date ? format_date(frm.doc.offer_date) : '[Joining Date]';\n    \n    // Salary and benefits fields\n    const annual_ctc = frm.doc.custom_annual_ctc ? format_currency(frm.doc.custom_annual_ctc) : '[Amount]';\n    const monthly_gross = frm.doc.custom_monthly_gross_salary ? format_currency(frm.doc.custom_monthly_gross_salary) : '[Amount]';\n    const basic_salary = frm.doc.custom_basic_salary ? format_currency(frm.doc.custom_basic_salary) : '[Amount]';\n    const hra = frm.doc.custom_hra ? format_currency(frm.doc.custom_hra) : '[Amount]';\n    const special_allowance = frm.doc.custom_special_allowance ? format_currency(frm.doc.custom_special_allowance) : '[Amount]';\n    const prof_dev_allowance = frm.doc.custom_professional_development_allowance ? format_currency(frm.doc.custom_professional_development_allowance) : '[Amount]';\n    \n    // Other terms\n    const probation_period = frm.doc.custom_probation_period || '[X] months';\n    const notice_period = frm.doc.custom_notice_period || '[X] months';\n    \n    console.log('Field values:', {\n        department, work_location, supervisor, work_schedule, \n        designation, company, joining_date, annual_ctc, \n        monthly_gross, basic_salary, hra, special_allowance, \n        prof_dev_allowance, probation_period, notice_period\n    });\n    \n    // Create sections matching the template structure\n    const position_reporting = \n        `• Designation: ${designation}\\n` +\n        `• Department: ${department}\\n` +\n        `• Reporting Manager: ${supervisor}\\n` +\n        `• Work Location: ${work_location}`;\n    \n    const compensation_benefits = \n        `• Annual CTC: ${annual_ctc} per annum\\n` +\n        `• Monthly Gross Salary: ${monthly_gross}\\n` +\n        `• Basic Salary: ${basic_salary}\\n` +\n        `• House Rent Allowance (HRA): ${hra}\\n` +\n        `• Special Allowance: ${special_allowance}\\n` +\n        `• Professional Development Allowance: ${prof_dev_allowance} (up to per annum)`;\n    \n    const employment_terms = \n        `• Employment Type: Permanent/Full-time\\n` +\n        `• Probation Period: ${probation_period} from the date of joining\\n` +\n        `• Notice Period: ${notice_period} as per company policy\\n` +\n        `• Working Hours: ${work_schedule}\\n` +\n        `• Date of Joining: ${joining_date}`;\n    \n    console.log('Position and reporting:', position_reporting);\n    console.log('Compensation and benefits:', compensation_benefits);\n    console.log('Employment terms:', employment_terms);\n    \n    // Check if rows exist and update only if not manually edited\n    const position_exists = check_row_exists(frm, 'Position and Reporting');\n    const compensation_exists = check_row_exists(frm, 'Compensation and Benefits');\n    const employment_exists = check_row_exists(frm, 'Employment Terms');\n    \n    // Update rows only if they exist and haven't been manually edited\n    if (position_exists && !manuallyEdited['Position and Reporting'] && !userRemovedPosition) {\n        update_fulltime_child_table_row_by_term(frm, 'Position and Reporting', position_reporting);\n    }\n    \n    if (compensation_exists && !manuallyEdited['Compensation and Benefits'] && !userRemovedCompensation) {\n        update_fulltime_child_table_row_by_term(frm, 'Compensation and Benefits', compensation_benefits);\n    }\n    \n    if (employment_exists && !manuallyEdited['Employment Terms'] && !userRemovedEmployment) {\n        update_fulltime_child_table_row_by_term(frm, 'Employment Terms', employment_terms);\n    }\n    \n    // If rows don't exist yet, add them (but respect user deletions)\n    if (!position_exists && !userRemovedPosition) {\n        console.log('Adding Position and Reporting row');\n        add_fulltime_child_table_row(frm, 'Position and Reporting', position_reporting);\n    }\n    \n    if (!compensation_exists && !userRemovedCompensation) {\n        console.log('Adding Compensation and Benefits row');\n        add_fulltime_child_table_row(frm, 'Compensation and Benefits', compensation_benefits);\n    }\n    \n    if (!employment_exists && !userRemovedEmployment) {\n        console.log('Adding Employment Terms row');\n        add_fulltime_child_table_row(frm, 'Employment Terms', employment_terms);\n    }\n    \n    // Refresh the form to see changes\n    frm.refresh_field('offer_terms');\n}\n\nfunction check_row_exists(frm, offer_term_value) {\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        const grid = child_table.grid;\n        return grid.data.some(row => row.offer_term === offer_term_value);\n    }\n    \n    return false;\n}\n\nfunction update_fulltime_child_table_row_by_term(frm, offer_term_value, new_value) {\n    console.log('Looking for offer term:', offer_term_value);\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        console.log('Child table found: offer_terms');\n        const grid = child_table.grid;\n        \n        // Find the row with the matching offer_term value\n        let target_row = null;\n        let row_index = -1;\n        \n        grid.data.forEach((row, idx) => {\n            if (row.offer_term === offer_term_value) {\n                target_row = row;\n                row_index = idx;\n                console.log('Found matching row at index:', idx, 'Row:', row);\n            }\n        });\n        \n        if (target_row) {\n            console.log('Updating row with value:', new_value);\n            // Update the value/description field\n            frappe.model.set_value(target_row.doctype, target_row.name, 'value', new_value);\n            console.log('Value updated successfully');\n            \n            // Refresh the grid to see changes\n            grid.refresh();\n            return true;\n        } else {\n            console.log('Row not found with offer_term:', offer_term_value);\n            console.log('Available rows:', grid.data.map(r => r && r.offer_term ? r.offer_term : 'undefined'));\n            return false;\n        }\n    } else {\n        console.log('Child table not found: offer_terms');\n        return false;\n    }\n}\n\nfunction add_fulltime_child_table_row(frm, offer_term_value, value) {\n    console.log('Adding new row for:', offer_term_value);\n    \n    // Get the child table\n    const child_table = frm.fields_dict.offer_terms;\n    \n    if (child_table && child_table.grid) {\n        // Add a new row\n        const new_row = frappe.model.add_child(frm.doc, 'Job Offer Term', 'offer_terms');\n        \n        // Set the values\n        new_row.offer_term = offer_term_value;\n        new_row.value = value;\n        \n        // Refresh the grid\n        child_table.grid.refresh();\n        \n        console.log('Row added successfully');\n        return true;\n    } else {\n        console.log('Child table not found: offer_terms');\n        return false;\n    }\n}\n\nfunction format_date(date_string) {\n    if (!date_string) return '';\n    \n    // Handle Frappe date format (YYYY-MM-DD)\n    const date_parts = date_string.split('-');\n    if (date_parts.length === 3) {\n        const date = new Date(date_parts[0], date_parts[1] - 1, date_parts[2]);\n        return date.toLocaleDateString('en-US', { \n            year: 'numeric', \n            month: 'long', \n            day: 'numeric' \n        });\n    }\n    \n    return date_string;\n}\n\nfunction format_currency(amount) {\n    if (!amount) return '';\n    \n    // Check if amount is already formatted\n    if (typeof amount === 'string' && amount.includes('₹')) {\n        return amount;\n    }\n    \n    // Convert to number if it's a string\n    const numericAmount = typeof amount === 'string' ? parseFloat(amount) : amount;\n    \n    return new Intl.NumberFormat('en-IN', {\n        style: 'currency',\n        currency: 'INR',\n        minimumFractionDigits: 2\n    }).format(numericAmount);\n}",
  "view": "Form"
 }
]